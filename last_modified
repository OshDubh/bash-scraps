#!/bin/bash

# Filename: last_modified
# Description: Changes the "last modified" line in a file whenever it is saved
# Author: OshDubh

# function name: get_date_time
# description: Takes a file and returns the full desired date format
get_date_time () {
  local input_file="$1" # get save the file name
  local day=$(date -r $input_file +%d) # get the day number from the timestamp
  local suffix="th" # default suffix

  # change for special cases
  if [[ "$day" != 11 && "$day" != 12 && "$day" != 13 ]]; then
    case ${day: -1} in # get the last digit of the day number
      1) suffix="st";;
      2) suffix="nd";;
      3) suffix="rd";;
    esac
  fi

  echo $(date -r $input_file +"%R on %A, the %d$suffix of %B, %Y.")
}

# funciton name: program
# description: the main loop that constantly runs
program ()
{
    # get the info we need
    local script_location=$(dirname "$0") # get the location of the script
    file="$1" 
    
    suffix=$(echo $file | sed -e 's|^\(.*\.\)||g')  # get the last modified file's file extension

    # exit if there is no template for the file
    [[ -f "$script_location/template_$suffix.txt" ]] || log "\033[31merror:\033[0m no template exists for the last modified file." || exit

    # intelligently get what line we need to modify from the template
    line=$(cat "$script_location/template_$suffix.txt" | grep "_last_modified_" | sed -e 's|_last_modified_||g' ) # get everything before the match in the line
    [[ -z "$line" ]] && log "\033[31merror:\033[0m the template for the last modified file does not have a _last_modified_ line." && exit 1 # exit if there is no _last_modified_ line

    # only modify the line if the current line is older than the one derived from the modification time of the file
    current_last_modified_line=$(cat "$file" | grep "$line") # get the current last modified line that exists in the file
    new_last_modified_line="$line$(get_date_time $file)" # what the line should say

    # replace the line if they're not equal
    if [[ "$current_last_modified_line" != "$new_last_modified_line" ]]
    then
      sed -i.bak "s|$current_last_modified_line|$new_last_modified_line|" "$file"
      log "updated \033[34m$file\033[0m"
    fi
}

# name: log
# logs the provided string to the function
log ()
{
  local script_location=$(dirname "$0") # get the location of the script
  echo -e "\033[30m[`date +%Y-%m-%d` `date +%H:%M`]\033[0m $1" # log to the terminal
  echo -e "[`date +%Y-%m-%d` `date +%H:%M`] $1" | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" >> $script_location/last_modified.log # log without the color codes
}

# name: get_last_compatable_file
# description: gets the most recently modified file that has a template
get_last_compatable_file ()
{
  local script_location=$(dirname "$0") # get the location of the script
  local suffixes=$(ls "$script_location" | grep "template_" | sed -e 's|template_||g' -e 's|\.txt||g') # get all the suffixes of the templates
  local last_modified=$(ls -t | head -n 1) # get the most recently modified file
  local last_modified_suffix=$(echo $last_modified | sed -e 's|^\(.*\.\)||g') # get the suffix of the most recently modified file

  # go over the files in order of modification and return the first one that has a template
  for file in $(ls -t)
  do
    for suffix in $suffixes
    do
      [[ "$suffix" == "$(echo $file | sed -e 's|^\(.*\.\)||g')" ]] && echo "$file" && return
    done
  done
}

script_location=$(dirname "$0") # get the location of the script
file=$(get_last_compatable_file)
log "started watching \033[34m$file\033[0m"
modified=$(date -r $file +%s)

while true;
do
  recheck=$(get_last_compatable_file)
  [[ "$file" != "$recheck" ]] && file=$recheck && log "switched to \033[34m$file\033[0m"

  if [[ "$modified" -ne $(date -r $file +%s) ]];
  then
    program $file
  fi

  modified=$(date -r $file +%s)
  sleep 1
done
