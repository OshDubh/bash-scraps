#!/bin/bash

# Filename: create
# Description: Creates a new file from a template and opens it in visual studio code.

# function name: show_help_message
# description: displays the help message for the create script
show_help_message ()
{
  cat << EOF
Usage: create [OPTIONS] FILENAME [DESCRIPTION]
Creates a new file with the specified FILENAME and appends the appropriate template
DESCRIPTION is an optional argument that can be used to provide a brief description of the file.

Options:
  -h    Display this help message and exit.
  -e    Specify the preferred editor to open the file in. Default is "nano".
  -l    List the available templates.
  -t    Create a new template.
  -c    Configure the script.

Examples:
  create myscript.py
  create hello.py "my first python script, now with 100% more description!"
  create -e subl myscript.py
EOF

  exit 0
}

# function name: get_day_suffix
# description: returns the suffix for the current day number
get_day_suffix ()
{
  local day=$(date +%d) # get the day number
  local suffix="th" # default suffix

  # change for special cases
  if [[ "$day" != 11 && "$day" != 12 && "$day" != 13 ]]; then
    case ${day: -1} in # get the last digit of the day number
      1) suffix="st";;
      2) suffix="nd";;
      3) suffix="rd";;
    esac
  fi

  echo $suffix # return the suffix
}

# function name: list_templates
# description: displays the list of available templates that exist in the same directory as the script
list_templates ()
{
  local script_location=$(dirname "$0")  # get the location of the script 
  local templates=$(ls $script_location/template_*.txt) # get the list of templates

  # print the list of templates
  echo "Available templates:"
  for template in $templates;
  do
    echo " - $(basename $template | sed -e 's|template_||g' -e 's|\.txt||g')"
  done

  echo -e "\nUse the -t flag to create a new template."
  exit 0
}

# TODO: flags support using getopts
  # flags: 
    # -h for help, 
    # -e to specify the editor,
    # -l to list the available templates
    # -t to create a new template
    # -c to configure the script
      # this will create a config file in the home directory that will store the preffered editor and the path to the templates directory. 
      # the script will look for this file and use the values in it if it exists, otherwise it will use the default values. 
  # error if no matching template is found

preffered_editor="code" # the preffered editor to open the file in
today=$(date +"Date created: %R on %A, the %d`get_day_suffix` of %B, %Y.") # get the current date in a long format with the suffix

# parse the flags using getopts, exit after every flag
while getopts ":hle" opt;
do
  case $opt in
    h)
      echo "help"
      ;;
    l)
      echo "list"
      ;;
    e)
      echo "editor"
      ;;
    *)
      echo -e "Not a valid flag!\n\nValid options:\n -h for help\n -l to list the available template.\n -e to specify the preferred editor.\n -t to create a new template.\n -c to configure the script."
      exit 1
      ;;
  esac
done

# shift the processed options out of the argument list
shift $((OPTIND - 1))

# extract the file details from the arguments
filename="$1" # the filename, including suffix
language=$(echo $filename | sed -e 's|^\(.*\.\)||g') # the file suffix (everything after the ".")
title=$(echo $filename | sed -e 's|\.[^.]*$||g') # the filename without the suffix or the "."
description="$2" # the description of the file

[[ -z "$1" ]] && show_help_message # echo the help if no arguments are given

touch "$filename" # create the file
cat ~/bin/template_${language}.txt >> $filename # append the right template to the file

# replace the template variables with the actual variables
sed -i "s|_filename_|$filename|g" $filename
sed -i "s|_title_|$title|g" $filename
sed -i "s|_description_|$description|g" $filename
sed -i "s|_user_|$USER|g" $filename
sed -i "s|_date_|$today|g" $filename

# open the file in sublime
$preffered_editor "$filename"