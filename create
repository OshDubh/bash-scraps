#!/bin/bash

# Filename: create
# Description: Creates a new file from a template and opens it in visual studio code.
# Author: OshDubh


# function name: show_help_message
# description: displays the help message for the create script
show_help_message ()
{
  cat << EOF
Usage: create [OPTIONS] FILENAME [DESCRIPTION]
Creates a new file with the specified FILENAME and appends the appropriate template
DESCRIPTION is an optional argument that can be used to provide a brief description of the file.

Options:
  -h    Display this help message and exit.
  -e    Specify the preferred editor to open the file in. Default is "nano".
  -l    List the available templates.
  -t    Create a new template.
  -c    Configure the script.

Examples:
  create myscript.py
  create hello.py "my first python script, now with 100% more description!"
  create -e subl myscript.py
EOF

  exit 0
}

# function name: get_day_suffix
# description: returns the suffix for the current day number
get_day_suffix ()
{
  local day=$(date +%d) # get the day number
  local suffix="th" # default suffix

  # change for special cases
  if [[ "$day" != 11 && "$day" != 12 && "$day" != 13 ]]; then
    case ${day: -1} in # get the last digit of the day number
      1) suffix="st";;
      2) suffix="nd";;
      3) suffix="rd";;
    esac
  fi

  echo $suffix # return the suffix
}

# function name: list_templates
# description: displays the list of available templates that exist in the same directory as the script
list_templates ()
{
  local script_location=$(dirname "$0")  # get the location of the script 
  local templates=$(ls $script_location/template_*.txt) # get the list of templates

  # print the list of templates
  echo "Available templates:"
  for template in $templates;
  do
    echo " - $(basename $template | sed -e 's|template_||g' -e 's|\.txt||g')"
  done

  echo -e "\nUse the -t flag to create a new template."
  exit 0
}

# name: create_template
# description: guides the user through creating a new template and saves it in the same directory as the script
create_template ()
{
  echo "Welcome to the template creator."
  echo "This script will guide you through creating a new template."
  echo -e "First, enter the file suffix of the language you want the template to be for.\nExample: "py" for python, "js" for javascript, etc..."
  
  # get the file suffix input, and keep asking for it until it passes the validation
  local suffix=""
  local filename="" # the name of the template file, for opening in the editor
  local script_location=$(dirname "$0")  # get the location of the script 
  local file_exists=false # flag to check if the file already exists

  while [[ -z "$suffix" ]];
  do
    echo "" # whitespace for separation
    read -p "File suffix: " suffix # get the file suffix

    # validation
    [[ -z "$suffix" ]] && echo "Error: No file suffix provided" # check that a suffix was entered
    [[ $suffix == .* ]] && suffix="${suffix:1}" # remove the leading full stop if it exists
    [[ "$suffix" =~ [^a-zA-Z0-9] ]] && echo "Error: not a valid suffix" && suffix="" # check that the suffix is alphanumeric
    [[ -f "$script_location/template_$suffix.txt" ]] && echo "Error: template already exists. Opening existing template..." && file_exists=true
    [[ -z "$filename" ]] && filename="template_$suffix.txt" # set the filename if it hasn't been set yet
  done

  [[ $file_exists == true ]] && $preffered_editor "$script_location/template_$suffix.txt" && exit 0 # open the existing template if it exists

  # create the new template and paste all template lines into it, below
  cat << EOF >> "$script_location/template_$suffix.txt"
Welcome to create's template creator. 
Just add content below the #'s to create a new template. This header text will be removed after you close the file.

Use variables for the content you want create to add automatically. These variables will be changed when you use create to generate a file. 
Supported variables
_filename_      : will be replaced by the name of the file you just created, e.g. "helloworld.py".
_title_         : will be replaced by the name of the file without the file suffix, eg "helloworld".
_description_   : will be replaced by the description you gave to create, e.g. "this is create's second argument".
_user_          : will be replaced by the current user, taken from your command-line environment, e.g "OshDubh".
_date_          : will be replaced by the date the file was created, e.g. "09:41 on Sunday, the 24th of September, 2023".
_last_modified_ : will be replaced by the date the file was last modified if create was run with the flag to update dates live.


Possible example for a python file:

# Filename: _filename_
# Title: _title_
# Description: _description_
# Author: _user_
# Date created: _date
# Last modified: _last_modified_

#!/usr/bin python3

# main function
if __name__ == "__main__":

### end of template ###
EOF

  $preffered_editor "$script_location/template_$suffix.txt" # open the template in the editor

  # wait for the file to be saved by checking the modification time
  echo "Waiting for the template file to be saved before continuing..."
  local last_modified=$(stat -c %Y "$script_location/template_$suffix.txt")
  local current_time=$(date +%s)
  while [[ "$last_modified" -eq "$current_time" ]];
  do
    sleep 1
    last_modified=$(stat -c %Y "$script_location/template_$suffix.txt")
  done

  # remove the header text, starting at line one and ending at the line that matches, deleting the entire range
  sed -i '1,/### end of template ###/d' "$script_location/template_$suffix.txt"
  echo "Template created successfully!" 

}

# TODO: flags support using getopts
  # flags: 
    # -h for help, 
    # -e to specify the editor,
    # -l to list the available templates
    # -t to create a new template
    # -c to configure the script
  # error if no matching template is found
  # update the help message formatting to be more unix-standard
    # see usermod for a good example on how it should look
  # specify which template to use

preffered_editor="code" # where we will store the preferred editor
today=$(date +"%R on %A, the %d`get_day_suffix` of %B, %Y.") # get the current date in a long format with the suffix

# parse the flags using getopts, exit after every flag
# check that only one flag was provided
if [[ "$OPTIND" -gt 2 ]]; then
  echo "Error: only one flag can be used at a time" >&2
  show_help_message
  exit 1
fi

while getopts :hle:t name;
do
  case $name in
    h)
      show_help_message
      exit
      ;;
    l)
      list_templates
      exit
      ;;
    e)
      preferred_editor=$OPTARG
      echo "Preferred editor set to $preferred_editor"
      ;;
    t)
      create_template
      exit
      ;;
    *)
      echo "Error: unrecognized option -$opt" >&2
      show_help_message
      exit 1
      ;;
  esac
done
shift $(($OPTIND -1))

[[ -z "$1" ]] && show_help_message # echo the help if no arguments are given

# extract the file details from the arguments
filename="$1" # the filename, including suffix
language=$(echo $filename | sed -e 's|^\(.*\.\)||g') # the file suffix (everything after the ".")
title=$(echo $filename | sed -e 's|\.[^.]*$||g') # the filename without the suffix or the "."
description="$2" # the description of the file

touch "$filename" # create the file
cat ~/bin/template_${language}.txt >> $filename # append the right template to the file

# replace the template variables with the actual variables
sed -i "s|_filename_|$filename|g" $filename
sed -i "s|_title_|$title|g" $filename
sed -i "s|_description_|$description|g" $filename
sed -i "s|_user_|$USER|g" $filename
sed -i "s|_date_|$today|g" $filename
sed -i "s|_last_modified_|$today|g" $filename

# open the file in the editor
$preffered_editor "$filename"